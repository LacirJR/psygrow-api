// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"io"
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

// Load swagger.json content directly
func loadSwaggerJSON() string {
	// Try different possible paths to find swagger.json
	possiblePaths := []string{
		"docs/swagger.json",
		"./docs/swagger.json",
		"../docs/swagger.json",
		"../../docs/swagger.json",
		"src/docs/swagger.json",
		"./src/docs/swagger.json",
		"../src/docs/swagger.json",
		"src/internal/docs/swagger.json",
		"./src/internal/docs/swagger.json",
		"../src/internal/docs/swagger.json",
	}

	var jsonFile *os.File
	var err error
	var filePath string

	// Try to open the file from different possible paths
	for _, path := range possiblePaths {
		jsonFile, err = os.Open(path)
		if err == nil {
			filePath = path
			break
		}
	}

	// If we couldn't open the file from any path, return a minimal valid Swagger JSON
	if err != nil {
		log.Printf("Error opening swagger.json from any path: %v", err)
		// Criar uma documentação mínima diretamente no código para evitar erros
		return `{
			"swagger": "2.0",
			"info": {
				"description": "API para gerenciamento de consultório psicológico",
				"title": "PsyGrow API",
				"contact": {},
				"version": "1.0"
			},
			"host": "localhost:8080",
			"basePath": "/api/v1",
			"securityDefinitions": {
				"Bearer": {
					"type": "apiKey",
					"name": "Authorization",
					"in": "header"
				}
			},
			"paths": {
				"/auth/login": {
					"post": {
						"description": "Autentica um usuário e retorna um token JWT",
						"produces": ["application/json"],
						"tags": ["auth"],
						"summary": "Login",
						"responses": {
							"200": {
								"description": "OK"
							}
						}
					}
				}
			}
		}`
	}
	defer jsonFile.Close()

	log.Printf("Successfully opened swagger.json from path: %s", filePath)

	byteValue, err := io.ReadAll(jsonFile)
	if err != nil {
		log.Printf("Error reading swagger.json: %v", err)
		return `{
			"swagger": "2.0",
			"info": {
				"description": "Error reading Swagger JSON file",
				"title": "API Documentation Error",
				"version": "1.0"
			},
			"paths": {}
		}`
	}

	return string(byteValue)
}

var doc = loadSwaggerJSON()

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swag.Spec{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/api/v1",
	Schemes:     []string{"http"},
	Title:       "PsyGrow API",
	Description: "API para gerenciamento de consultório psicológico",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v string) string {
			// escape backslashes
			v = strings.Replace(v, "\\", "\\\\", -1)
			// escape double quotes
			v = strings.Replace(v, "\"", "\\\"", -1)
			return v
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
